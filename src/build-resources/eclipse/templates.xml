<?xml version="1.0" encoding="UTF-8"?><templates><template autoinsert="true" context="java" deleted="false" description="log debug" enabled="true" name="debug">if (log.isDebugEnabled()){
	log.debug("${enclosing_method} -&gt; ${cursor}");
}</template><template autoinsert="true" context="java" deleted="false" description="log error" enabled="true" name="error">log.error("${enclosing_method} -&gt; ${cursor}");</template><template autoinsert="true" context="java" deleted="false" description="log fatal" enabled="true" name="fatal">log.fatal("${enclosing_method} -&gt; ${cursor}");</template><template autoinsert="true" context="java" deleted="false" description="file comment used by the class and interface wizards" enabled="true" name="filecomment">/**
 * Copyright NEUSTA GmbH 2005 All Rights Reserved
 *
 * auto generated header - cvs system $$Date: 2006/08/30 09:35:35 $$
 * $$Author: tfrana $$
 * $$Revision: 1.1 $$
 * $$Source: /cvsroot/texconverter//TexConverter/src/build-resources/eclipse/templates.xml,v $$
 * $$State: Exp $$
 *
 * Projekt : ${enclosing_project}
 * Created : ${date} ${user}
 */</template><template autoinsert="true" context="java" deleted="false" description="log info" enabled="true" name="info">if (log.isInfoEnabled()){
	log.info("${enclosing_method} -&gt; ${cursor}");
}</template><template autoinsert="true" context="java" deleted="false" description="inits a commons logging logger" enabled="true" name="logger">/**&#13;
* Apache commons logging reference.&#13;
*/&#13;
private static transient Log log = LogFactory.getLog(${enclosing_type}.class);</template><template autoinsert="true" context="java" deleted="false" description="integer constant" enabled="true" name="psfi">public static final int</template><template autoinsert="true" context="java" deleted="false" description="constant" enabled="true" name="psfs">public static final String</template><template autoinsert="true" context="java" deleted="false" description="Singleton using &quot;double-checked locking (DVL) - this pattern may not work!" enabled="true" name="singleton">/** singleton instance */&#13;
private ${enclosing_type}(){&#13;
	super();&#13;
}&#13;
&#13;
private ${enclosing_type} instance = null;&#13;
&#13;
/** singleton accessor method */&#13;
public ${enclosing_type} getInstance() {&#13;
	if (instance == null) {&#13;
    	createInstance();&#13;
	}&#13;
    return instance;&#13;
}&#13;
&#13;
/**&#13;
 * creates new instance&#13;
 */&#13;
private synchronized void createInstance() {&#13;
	if (instance == null) instance = new ${enclosing_type}();&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="Singleton with static initializer" enabled="true" name="singleton">	/** singleton constructor */&#13;
	private ${enclosing_type}() {&#13;
		super();&#13;
	}&#13;
&#13;
	/** singleton instance */&#13;
	private static ${enclosing_type} INSTANCE = new ${enclosing_type}();&#13;
&#13;
	/** &#13;
	 * singleton accessor method.&#13;
	 * @return a unique instance of this class.&#13;
	 */&#13;
	public static ${enclosing_type} getInstance() {&#13;
		return INSTANCE;&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="log trace" enabled="true" name="trace">if (log.isTraceEnabled()){
	log.trace("${enclosing_method} -&gt; ${cursor}");
}</template><template autoinsert="true" context="java" deleted="false" description="marking start of method for logger" enabled="true" name="traceIn">if (log.isTraceEnabled()){
	log.trace("${enclosing_method} -&gt; START");
}</template><template autoinsert="true" context="java" deleted="false" description="marking end of method" enabled="true" name="traceOut">if (log.isTraceEnabled()){
	log.trace("${enclosing_method} -&gt; END");
}</template><template autoinsert="true" context="java" deleted="false" description="log warn" enabled="true" name="warn">log.warn("${enclosing_method} -&gt; ${cursor}");</template></templates>